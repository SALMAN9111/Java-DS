package com.datastructure.singlylinkedlist;


public class singlyLinkedLIstTest {

	public static void main(String[] args) {
		singlyLinkedLIstTest sll = new singlyLinkedLIstTest();
		sll.head = new listNode(10);
		listNode second = new listNode(20);
		listNode third = new listNode(30);

		sll.head.next = second;
		second.next = third;

		System.out.println("Displaying SinglyLinkedList");
		sll.display();
//
//		System.out.println("\nDisplaying Length");
//		System.out.println("Length is : " + sll.Length());
//
//		System.out.println("\nInserting a newNode at the first position of the SinglyLinkedList");
//		sll.insertAtFirst(1);
//		sll.display();
//
//		System.out.println("\nInserting a newNode at the end of the SinglyLinkedList");
//		sll.insertAtEnd(40);
//		sll.display();
//		
//		System.out.println("\nInserting a newNode at a given position in SinglyLinkedList");
//		sll.insertInBetween(25, 4);
//		sll.display();
		
//		System.out.println("\nInserting a newNode at a given position in SinglyLinkedList");
//		sll.insertInBetween(15, 3);
//		sll.display();
//		
//		System.out.println("\nInserting a newNode at a given position in SinglyLinkedList");
//		sll.insertInBetween(100, 9823);
//		sll.display();
		
		System.out.println("\nDeleting first node from SinglyLinkedList");
		System.out.println("Deleted node of SLL "+sll.deleteFirst());
		sll.display();
	}

	private listNode head;

	private static class listNode {
		private int data;
		private listNode next;

		public listNode(int data) {
			this.data = data;
			this.next = null;
		}
	}

	private void display() {
		listNode current = head;
		if (current != null) {
			while (current != null) {
				System.out.print(current.data);
				if (current.next != null) {
					System.out.print("-->");
				}
				current = current.next;
			}
			System.out.println();
			return;
		}

		System.out.println("SinglyLinkedList is empty");
	}

	private int Length() {
		listNode current = head;
		int count = 0;
		while (current != null) {
			count = count + 1;
			current = current.next;
		}
		// System.out.println("Length is : "+count);
		return count;
	}

	private void insertAtFirst(int value) {
		listNode newNode = new listNode(value);
		newNode.next = head;
		head = newNode;
	}

	private void insertAtEnd(int value) {
		listNode newNode = new listNode(value);
		if (head == null) {
			head = newNode;
			return;
		}

		listNode current = head;
		while (current.next != null) {
			current = current.next;
		}
		current.next = newNode;
	}

	private void insertInBetween(int value, int position) {
		listNode newNode = new listNode(value);
		listNode current = head;
		int count = 1;
		if(position == 1) {
			newNode.next = head;
			head = newNode;
			return;
		}
		if(position > Length()){
			while (current.next != null) {
				current = current.next;
			}
			current.next = newNode;
			return;
		}
		
		while(count < position -1) {
			current = current.next;
			count++;
		}
		newNode.next = current.next;
		current.next = newNode;
	}
	
	private listNode deleteFirst() {
		if(head == null) {
			return null;
		}
		
		listNode temp = head;
		head = head.next;
		temp.next = null;
		return temp;
	}
	
	private listNode 
}
